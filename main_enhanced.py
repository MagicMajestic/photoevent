# main_enhanced.py - –£–ª—É—á—à–µ–Ω–Ω—ã–π Discord –±–æ—Ç —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
import os
import discord
import datetime
import pytz
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import database
import config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.dm_messages = True
intents.members = False

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = discord.Bot(intents=intents)

def is_event_active() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–≤–µ–Ω—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è."""
    try:
        start_time = datetime.datetime.fromisoformat(config.EVENT_START_TIME.replace('Z', '+00:00'))
        end_time = datetime.datetime.fromisoformat(config.EVENT_END_TIME.replace('Z', '+00:00'))
        current_time = datetime.datetime.now(pytz.UTC)
        return start_time <= current_time <= end_time
    except Exception:
        return False

def format_event_dates() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∏–≤–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        start_time = datetime.datetime.fromisoformat(config.EVENT_START_TIME.replace('Z', '+00:00'))
        end_time = datetime.datetime.fromisoformat(config.EVENT_END_TIME.replace('Z', '+00:00'))
        start_str = start_time.strftime("%d.%m.%Y –≤ %H:%M")
        end_str = end_time.strftime("%d.%m.%Y –≤ %H:%M")
        return f"{start_str} –¥–æ {end_str}"
    except Exception:
        return "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç"

def get_user_tag(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç Discord —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    try:
        user = bot.get_user(user_id)
        if user:
            return f"@{user.name}"
        else:
            return f"ID:{user_id}"
    except:
        return f"ID:{user_id}"

class RegistrationModal(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≤–µ–Ω—Ç")
        
    static_id = discord.ui.InputText(
        label='–í–∞—à StaticID',
        placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à StaticID',
        required=True,
        max_length=50
    )
    
    nickname = discord.ui.InputText(
        label='–í–∞—à –∏–≥—Ä–æ–≤–æ–π Nickname',
        placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º',
        required=True,
        max_length=50
    )

    async def callback(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        static_id_value = self.static_id.value.strip() if self.static_id.value else None
        nickname_value = self.nickname.value.strip() if self.nickname.value else None
        
        if not static_id_value or not nickname_value:
            await interaction.response.send_message("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!", ephemeral=True)
            return

        success = database.register_player(interaction.user.id, static_id_value, nickname_value)
        
        if success:
            embed = discord.Embed(
                title="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
                description=f"**StaticID:** {static_id_value}\n**Nickname:** {nickname_value}\n\n**–ü–µ—Ä–∏–æ–¥ –∏–≤–µ–Ω—Ç–∞:** {format_event_dates()}",
                color=config.RASPBERRY_COLOR
            )
            embed.add_field(
                name="üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤",
                value="–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞.",
                inline=False
            )
            try:
                await interaction.user.send(embed=embed)
                await interaction.response.send_message("‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", ephemeral=True)

class RegistrationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", style=discord.ButtonStyle.primary)
    async def register_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        if interaction.guild and interaction.guild.id != config.GUILD_ID:
            await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return
        
        player = database.get_player(interaction.user.id)
        if player:
            await interaction.response.send_message("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", ephemeral=True)
            return
        
        modal = RegistrationModal()
        await interaction.response.send_modal(modal)

# –ö–ª–∞—Å—Å—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
class ScreenshotSelect(discord.ui.Select):
    def __init__(self, submissions, player_info):
        self.submissions = submissions
        self.player_info = player_info
        
        options = []
        for i, sub in enumerate(submissions[:25]):  # Discord limit 25
            timestamp = datetime.datetime.fromisoformat(sub['submission_time'])
            date_str = timestamp.strftime("%d.%m %H:%M")
            
            status_emoji = "‚úÖ" if sub['is_approved'] else ("‚è≥" if sub['is_valid'] else "‚ùå")
            label = f"–°–∫—Ä–∏–Ω—à–æ—Ç #{i+1} ({date_str})"
            description = f"{status_emoji} {'–û–¥–æ–±—Ä–µ–Ω' if sub['is_approved'] else ('–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' if sub['is_valid'] else '–û—Ç–∫–ª–æ–Ω–µ–Ω')}"
            
            options.append(discord.SelectOption(
                label=label[:100],
                description=description[:100], 
                value=str(sub['submission_id'])
            ))
        
        placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞..." if options else "–ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"
        
        super().__init__(
            placeholder=placeholder,
            options=options if options else [discord.SelectOption(label="–ü—É—Å—Ç–æ", value="0")],
            disabled=not options
        )

    async def callback(self, interaction: discord.Interaction):
        if self.disabled:
            return
            
        submission_id = int(self.values[0])
        submission = database.get_submission_by_id(submission_id)
        
        if not submission:
            await interaction.response.send_message("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return
        
        timestamp = datetime.datetime.fromisoformat(submission['submission_time'])
        date_str = timestamp.strftime("%d.%m.%Y –≤ %H:%M")
        
        status_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if submission['is_approved'] else ("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" if submission['is_valid'] else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")
        
        embed = discord.Embed(
            title=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç #{submission_id}",
            description=f"**–ò–≥—Ä–æ–∫:** {self.player_info['nickname']}\n**–î–∞—Ç–∞:** {date_str}\n**–°—Ç–∞—Ç—É—Å:** {status_text}",
            color=config.RASPBERRY_COLOR
        )
        embed.set_image(url=submission['screenshot_url'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        view = ScreenshotModerationView(submission_id, submission['is_approved']) if await is_admin(interaction.user, interaction.guild) else None
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class ScreenshotModerationView(discord.ui.View):
    def __init__(self, submission_id, current_status):
        super().__init__(timeout=300)
        self.submission_id = submission_id
        self.current_status = current_status
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if not current_status:
            self.add_item(discord.ui.Button(label="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", style=discord.ButtonStyle.success, custom_id=f"approve_{submission_id}"))
        self.add_item(discord.ui.Button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id=f"reject_{submission_id}"))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return await is_admin(interaction.user, interaction.guild)

    async def on_timeout(self):
        for item in self.children:
            item.disabled = True

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
class PlayerSelect(discord.ui.Select):
    def __init__(self, players_data):
        options = []
        for player in players_data[:25]:
            discord_id, nickname, screenshot_count = player
            display_name = get_user_tag(discord_id)
            
            label = f"{nickname} ({display_name})"
            description = f"–°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {screenshot_count}"
            
            options.append(discord.SelectOption(
                label=label[:100],
                description=description[:100],
                value=str(discord_id)
            ))
        
        placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è..." if options else "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"
        
        super().__init__(
            placeholder=placeholder,
            options=options if options else [discord.SelectOption(label="–ü—É—Å—Ç–æ", value="0")],
            disabled=not options
        )

    async def callback(self, interaction: discord.Interaction):
        if self.disabled:
            return
            
        selected_discord_id = int(self.values[0])
        player = database.get_player(selected_discord_id)
        if not player:
            await interaction.response.send_message("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return
        
        submissions = database.get_player_submissions(selected_discord_id)
        approved_count = len([s for s in submissions if s['is_approved']])
        
        embed = discord.Embed(
            title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞",
            color=config.RASPBERRY_COLOR
        )
        embed.add_field(name="–ù–∏–∫–Ω–µ–π–º", value=player['nickname'], inline=True)
        embed.add_field(name="Discord", value=get_user_tag(selected_discord_id), inline=True)
        embed.add_field(name="StaticID", value=player['static_id'], inline=True)
        embed.add_field(name="–°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", value=str(len(submissions)), inline=True)
        embed.add_field(name="–û–¥–æ–±—Ä–µ–Ω–æ", value=str(approved_count), inline=True)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚ùå –î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if player['is_disqualified'] else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω", inline=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        view = None
        if submissions:
            view = PlayerProfileView(submissions, player)
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class PlayerProfileView(discord.ui.View):
    def __init__(self, submissions, player_info):
        super().__init__(timeout=300)
        self.add_item(ScreenshotSelect(submissions, player_info))

class PlayerListView(discord.ui.View):
    def __init__(self, players_data):
        super().__init__(timeout=60)
        self.add_item(PlayerSelect(players_data))

async def is_admin(user, guild) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not guild:
        return False
    return user.guild_permissions.administrator

async def has_admin_permissions(ctx) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    if not ctx.guild:
        return False
    
    if not ctx.author.guild_permissions.administrator:
        await ctx.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", ephemeral=True)
        return False
    
    return True

@bot.event
async def on_ready():
    """–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
    print(f'{bot.user} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')
    database.setup_database()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º slash-–∫–æ–º–∞–Ω–¥—ã
    try:
        print("–ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

@bot.slash_command(name='start', description='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≤–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π', guild_ids=[config.GUILD_ID])
async def start_registration(ctx):
    """–°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–≤–µ–Ω—Ç."""
    if ctx.guild and ctx.guild.id != config.GUILD_ID:
        await ctx.respond("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
        return
    
    embed = discord.Embed(
        title="***–ò–≤–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π***",
        description="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–≤–µ–Ω—Ç!",
        color=config.RASPBERRY_COLOR
    )
    
    view = RegistrationView()
    await ctx.respond(embed=embed, view=view, ephemeral=True)

@bot.event
async def on_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–ø—Ä–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)."""
    
    if message.guild is not None or message.author == bot.user:
        return
    
    player = database.get_player(message.author.id)
    if not player:
        return
    
    if database.is_player_disqualified(message.author.id):
        await message.reply("‚ùå –í—ã –±—ã–ª–∏ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    if not is_event_active():
        await message.reply("‚è∞ –°–æ–±—ã—Ç–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
        return
    
    if not message.attachments:
        return
    
    valid_extensions = ['.png', '.jpg', '.jpeg', '.gif', '.webp']
    attachment = message.attachments[0]
    
    if not any(attachment.filename.lower().endswith(ext) for ext in valid_extensions):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG, JPG, JPEG, GIF –∏–ª–∏ WebP.")
        return
    
    success = database.add_submission(player['id'], attachment.url)
    
    if success:
        submissions = database.get_player_submissions(message.author.id)
        count = len(submissions)
        
        embed = discord.Embed(
            title="‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç!",
            description=f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: **{count}**\n–°—Ç–∞—Ç—É—Å: ‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            color=config.RASPBERRY_COLOR
        )
        embed.set_image(url=attachment.url)
        
        await message.reply(embed=embed)
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.slash_command(name='admin_stats', description='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≤–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)', guild_ids=[config.GUILD_ID])
async def admin_stats(ctx):
    """–°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≤–µ–Ω—Ç–∞."""
    if not await has_admin_permissions(ctx):
        return
    
    total_players = database.get_all_players_stats()
    leaderboard = database.get_leaderboard()
    approved_stats = database.get_approved_screenshots_stats()
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_submissions = sum(player[2] for player in leaderboard)
    total_approved = sum(player[3] for player in approved_stats)
    
    embed = discord.Embed(
        title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≤–µ–Ω—Ç–∞",
        color=config.RASPBERRY_COLOR
    )
    embed.add_field(name="üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤", value=str(total_players), inline=True)
    embed.add_field(name="üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤", value=str(len(leaderboard)), inline=True)
    embed.add_field(name="üì∏ –í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", value=str(total_submissions), inline=True)
    embed.add_field(name="‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", value=str(total_approved), inline=True)
    embed.add_field(name="üìÖ –ü–µ—Ä–∏–æ–¥ –∏–≤–µ–Ω—Ç–∞", value=format_event_dates(), inline=False)
    embed.add_field(name="‚è∞ –°—Ç–∞—Ç—É—Å", value="üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_event_active() else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω", inline=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤
    if leaderboard:
        top_players = leaderboard[:5]
        top_text = ""
        for i, (discord_id, nickname, count) in enumerate(top_players, 1):
            user_tag = get_user_tag(discord_id)
            top_text += f"{i}. {nickname} ({user_tag}) - {count} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n"
        embed.add_field(name="üèÜ –¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤", value=top_text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", inline=False)
    
    view = PlayerListView(leaderboard) if leaderboard else None
    await ctx.respond(embed=embed, view=view, ephemeral=True)

@bot.slash_command(name='admin_profile', description='–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)', guild_ids=[config.GUILD_ID])
async def admin_profile(ctx, user: discord.Member):
    """–°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞."""
    if not await has_admin_permissions(ctx):
        return
    
    player = database.get_player(user.id)
    if not player:
        await ctx.respond(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", ephemeral=True)
        return
    
    submissions = database.get_player_submissions(user.id)
    approved_count = len([s for s in submissions if s['is_approved']])
    
    embed = discord.Embed(
        title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞",
        color=config.RASPBERRY_COLOR
    )
    embed.add_field(name="–ù–∏–∫–Ω–µ–π–º", value=player['nickname'], inline=True)
    embed.add_field(name="Discord", value=f"@{user.name}", inline=True)
    embed.add_field(name="StaticID", value=player['static_id'], inline=True)
    embed.add_field(name="–°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", value=str(len(submissions)), inline=True)
    embed.add_field(name="–û–¥–æ–±—Ä–µ–Ω–æ", value=str(approved_count), inline=True)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚ùå –î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if player['is_disqualified'] else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω", inline=True)
    
    view = PlayerProfileView(submissions, player) if submissions else None
    await ctx.respond(embed=embed, view=view, ephemeral=True)

@bot.slash_command(name='admin_disqualify', description='–î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)', guild_ids=[config.GUILD_ID])
async def admin_disqualify(ctx, user: discord.Member):
    """–°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞."""
    if not await has_admin_permissions(ctx):
        return
    
    player = database.get_player(user.id)
    if not player:
        await ctx.respond(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", ephemeral=True)
        return
    
    success = database.disqualify_player(user.id)
    
    if success:
        embed = discord.Embed(
            title="‚ö†Ô∏è –ò–≥—Ä–æ–∫ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –±—ã–ª –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.\n–í—Å–µ –µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ.",
            color=0xFF0000
        )
        await ctx.respond(embed=embed, ephemeral=True)
        
        try:
            dm_embed = discord.Embed(
                title="‚ùå –î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
                description="–í—ã –±—ã–ª–∏ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã —Å –∏–≤–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π.",
                color=0xFF0000
            )
            await user.send(embed=dm_embed)
        except discord.Forbidden:
            pass
    else:
        await ctx.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏.", ephemeral=True)

@bot.slash_command(name='calculate', description='–†–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)', guild_ids=[config.GUILD_ID])
async def calculate_payments(ctx):
    """–°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç."""
    if not await has_admin_permissions(ctx):
        return
    
    approved_stats = database.get_approved_screenshots_stats()
    
    if not approved_stats:
        await ctx.respond("‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.", ephemeral=True)
        return
    
    embed = discord.Embed(
        title="üí∞ –†–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç",
        description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–µ–Ω–µ–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:",
        color=config.RASPBERRY_COLOR
    )
    
    commands_text = ""
    total_amount = 0
    
    for discord_id, nickname, static_id, approved_count in approved_stats:
        amount = approved_count * 10000
        total_amount += amount
        commands_text += f"/givemoney {static_id} {amount} EventMagic\n"
    
    embed.add_field(name="üìã –ö–æ–º–∞–Ω–¥—ã", value=f"```{commands_text}```", inline=False)
    embed.add_field(name="üíµ –û–±—â–∞—è —Å—É–º–º–∞", value=f"{total_amount:,} $", inline=True)
    embed.add_field(name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(len(approved_stats)), inline=True)
    
    await ctx.respond(embed=embed, ephemeral=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
@bot.event
async def on_interaction(interaction):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    if interaction.type != discord.InteractionType.component:
        return
    
    custom_id = interaction.data.get('custom_id', '')
    
    if custom_id.startswith('approve_'):
        submission_id = int(custom_id.split('_')[1])
        success = database.approve_screenshot(submission_id)
        
        if success:
            await interaction.response.send_message("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω!", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏.", ephemeral=True)
    
    elif custom_id.startswith('reject_'):
        submission_id = int(custom_id.split('_')[1])
        success = database.reject_screenshot(submission_id)
        
        if success:
            await interaction.response.send_message("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.", ephemeral=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    token = config.BOT_TOKEN
    if token == "YOUR_BOT_TOKEN_HERE":
        print("Error: Please set BOT_TOKEN in environment variables")
    else:
        bot.run(token)