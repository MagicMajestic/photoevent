Ты — экспертный Python-разработчик. Твоя задача — создать Discord-бота на русском языке, используя библиотеку Py-cord (современный форк discord.py). Бот будет предназначен для проведения ивента "поиск локаций" на игровом сервере GTA V RP и будет размещен на платформе Replit.

Цель проекта:
Бот должен регистрировать участников через команду /start, управлять приемом скриншотов через личные сообщения и предоставлять администраторам подробную статистику. Все данные должны храниться в локальной базе данных SQLite.

Ключевые технологии:

Python 3.10+

Библиотека Py-cord для взаимодействия с Discord API.

Библиотека sqlite3 для работы с базой данных.

Бот должен использовать современные возможности Discord: слэш-команды, модальные окна (формы) и встраиваемые сообщения (Embeds).

Внешний вид (эстетика):

Основной цвет: Все Embed-сообщения должны использовать малиновый цвет. HEX-код: #E30B5D.

Имитация шрифта:

Для имитации стиля "Proxima Nova Black" используй жирный текст в Markdown (**текст**).

Для имитации "Proxima Nova Black Italic" используй жирный курсив в Markdown (***текст***).

1. Схема базы данных (файл database.py)
Создай файл database.py, который будет обрабатывать все операции с базой данных. Файл БД должен называться event_data.db.

Важно: Названия таблиц и столбцов в коде оставляй на английском языке (в snake_case), так как это стандартная практика в программировании. Комментарии и описания — на русском.

Таблица 1: players

discord_id (INTEGER, PRIMARY KEY): Уникальный Discord ID пользователя.

static_id (TEXT, NOT NULL): Игровой Static ID участника.

nickname (TEXT, NOT NULL): Игровой никнейм участника.

registration_time (TIMESTAMP, NOT NULL): Время регистрации.

is_disqualified (BOOLEAN, DEFAULT FALSE): Флаг для дисквалифицированных игроков.

Таблица 2: submissions

submission_id (INTEGER, PRIMARY KEY, AUTOINCREMENT): Уникальный ID для каждого скриншота.

player_id (INTEGER, NOT NULL): Внешний ключ, ссылающийся на players.discord_id.

screenshot_url (TEXT, NOT NULL): URL-адрес загруженного скриншота.

submission_time (TIMESTAMP, NOT NULL): Время загрузки скриншота.

is_valid (BOOLEAN, DEFAULT TRUE): Флаг валидности, который администратор может изменить.

Необходимые функции в database.py:

setup_database(): Создает таблицы, если они еще не существуют.

register_player(discord_id, static_id, nickname): Добавляет нового игрока в таблицу players. Возвращает True при успехе, False если игрок уже существует.

get_player(discord_id): Получает данные игрока.

add_submission(player_id, screenshot_url): Добавляет новый скриншот в таблицу submissions.

get_player_submissions(discord_id): Получает все скриншоты конкретного игрока.

get_leaderboard(): Возвращает список игроков, отсортированный по количеству валидных скриншотов (по убыванию).

get_all_players_stats(): Возвращает общее количество зарегистрированных игроков.

disqualify_player(discord_id): Устанавливает is_disqualified в TRUE для игрока и is_valid в FALSE для всех его скриншотов.

is_player_disqualified(discord_id): Проверяет, дисквалифицирован ли игрок.

2. Конфигурация (файл config.py)
Создай файл config.py для хранения всех настроек.

Python

# config.py
BOT_TOKEN = "ВАШ_ТОКЕН_БОТА"  # Этот токен нужно будет хранить в Replit Secrets
GUILD_ID = 123456789012345678      # ID вашего сервера (гильдии)
ADMIN_ROLE_ID = 123456789012345678 # ID роли для администраторов

# Настройки времени проведения ивента (формат ISO 8601)
# Пример: 10 июля 2025, 18:00 по московскому времени (UTC+3)
EVENT_START_TIME = "2025-07-10T18:00:00+03:00" 
# Пример: 17 июля 2025, 23:59 по московскому времени (UTC+3)
EVENT_END_TIME = "2025-07-17T23:59:00+03:00"   

RASPBERRY_COLOR = 0xE30B5D
3. Основная логика бота (файл main.py)
A. Инициализация и проверка времени:

Импортируй необходимые библиотеки и файлы (discord, database, config, datetime, pytz).

Создай вспомогательную функцию is_event_active(), которая будет парсить время начала и конца из config.py и сравнивать с текущим временем datetime.utcnow().

B. Регистрация: команда /start:

Создай слэш-команду /start. Она должна быть доступна всем на сервере, указанном в GUILD_ID.

При вызове команды бот сначала проверяет, зарегистрирован ли уже пользователь, с помощью database.get_player(). Если да, сообщает ему об этом.

Если пользователь не зарегистрирован, бот показывает модальное окно (форму) с названием "Регистрация на ивент".

В форме должно быть два поля ввода текста:

StaticID (название поля: "Ваш StaticID")

Nickname (название поля: "Ваш игровой Nickname")

После отправки формы (on_submit):

Бот вызывает database.register_player(), передавая Discord ID пользователя и данные из формы.

При успешной регистрации бот отправляет пользователю личное сообщение (DM) с приветственным Embed-сообщением и правилами.

Содержимое приветственного Embed-сообщения (в ЛС):

Заголовок: ***Добро пожаловать на ивент!***

Цвет: #E30B5D

Описание: "Вы успешно зарегистрированы! Теперь всё взаимодействие происходит здесь, в личных сообщениях со мной."

Поля:

Поле 1 (Заголовок): ***Правила участия:***

Значение:

Просто отправляйте скриншоты найденных локаций мне в этот чат.

На скриншоте обязательно должен быть виден ваш игровой HUD.

С каждой уникальной локации принимается только один скриншот.

Жульничество, передача скриншотов или обман = полная дисквалификация и обнуление всего вашего прогресса.

Поле 2 (Заголовок): ***Сроки проведения:***

Значение: "Скриншоты принимаются с [ДАТА_НАЧАЛА] до [ДАТА_КОНЦА]." (динамически подставить из конфига).

Футер (нижний колонтитул): "Удачи в поисках!"

C. Обработка ЛС (событие on_message):

Бот должен прослушивать событие on_message.

Логика срабатывает только если message.guild is None (это личное сообщение) и message.author != bot.user.

Шаги обработки:

Проверить, зарегистрирован ли автор сообщения (database.get_player()). Если нет — игнорировать.

Проверить, не дисквалифицирован ли игрок (database.is_player_disqualified()). Если да — ответить: "Вы были дисквалифицированы."

Проверить, активен ли ивент (is_event_active()). Если нет — ответить: "Событие сейчас неактивно."

Проверить, что message.attachments не пустой и что вложение является изображением.

Если все проверки пройдены, вызвать database.add_submission() с ID игрока и URL вложения.

Ответить пользователю в ЛС подтверждением: "✅ Скриншот принят!"

Если в сообщении нет валидных вложений, бот не должен отвечать, чтобы избежать спама.

D. Команды администратора:

Создай группу команд для администраторов: admin = SlashCommandGroup("admin", "Команды для администрации").

Все команды в этой группе должны иметь проверку прав, разрешающую их использование только пользователям с ролью ADMIN_ROLE_ID.

/admin stats

Получает общее число участников и лидерборд из базы данных.

Отображает информацию в Embed-сообщении:

Заголовок: ***Статистика ивента***

Поля: "Всего участников", "Топ-10 игроков по количеству скриншотов". Лидерборд форматировать так: 1. @Пользователь (Никнейм) - X скриншотов.

/admin profile [user]

Принимает в качестве аргумента пользователя (discord.Member).

Получает из БД профиль игрока (static_id, nickname, is_disqualified) и все его скриншоты.

Отображает профиль в Embed-сообщении.

Выводит все URL-адреса скриншотов в виде кликабельных ссылок ([Скриншот 1](URL), [Скриншот 2](URL) и т.д.).

Важно для удобства: Если у игрока много скриншотов (больше 10), реализуй пагинацию с помощью discord.ui.View с кнопками "Вперед" и "Назад" для просмотра списка.

/admin disqualify [user]

Принимает в качестве аргумента пользователя (discord.Member).

Вызывает database.disqualify_player().

Отвечает подтверждением и пытается отправить игроку ЛС с уведомлением о дисквалификации.

E. Финальные инструкции по настройке в Replit:

Помести токен бота (BOT_TOKEN) в раздел "Secrets" в Replit. Ключ должен называться BOT_TOKEN.

Создай файл requirements.txt со следующим содержимым:

py-cord[voice]
python-dotenv
pytz
Основной скрипт main.py должен загружать токен из переменных окружения.